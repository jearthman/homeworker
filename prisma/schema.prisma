generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  lastLogin DateTime? @db.Timestamp(6)
  student   Student?  @relation()
  studentId Int?      @unique
}

model Disability {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique @db.VarChar(255)
  studentDisabilities StudentDisability[]
}

model Language {
  id               Int               @id @default(autoincrement())
  name             String            @unique @db.VarChar(255)
  studentLanguages StudentLanguage[]
  nativeSpeakers   Student[]
}

model StudentDisability {
  studentId    Int
  disabilityId Int
  disability   Disability @relation(fields: [disabilityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([studentId, disabilityId])
}

model StudentLanguage {
  studentId  Int
  languageId Int
  language   Language @relation(fields: [languageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student    Student  @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([studentId, languageId])
}

model Student {
  id                   Int                    @id @default(autoincrement())
  userId               Int                    @unique
  firstName            String                 @db.VarChar(50)
  gradeLevel           String                 @db.VarChar(50)
  nativeLanguageId     Int
  studentDisabilities  StudentDisability[]
  studentLanguages     StudentLanguage[]
  user                 User                   @relation(fields: [userId], references: [id])
  nativeLanguage       Language               @relation(fields: [nativeLanguageId], references: [id])
  studentAssignments   StudentAssignment[]
  StudentProblemAnswer StudentProblemAnswer[]
}

model Assignment {
  id                 Int                 @id @default(autoincrement())
  title              String              @db.VarChar(255)
  description        String              @db.Text
  subject            String              @db.VarChar(255)
  gradeLevel         String              @db.VarChar(50)
  gradingCriteria    String              @db.Text
  problems           Problem[]
  studentAssignments StudentAssignment[]
}

model Problem {
  id                   Int                    @id @default(autoincrement())
  content              String                 @db.Text
  answer               String                 @db.Text
  assignmentId         Int
  assignment           Assignment             @relation(fields: [assignmentId], references: [id])
  StudentProblemAnswer StudentProblemAnswer[]
}

model StudentAssignment {
  studentId             Int
  assignmentId          Int
  chatId                Int?
  status                String                 @db.VarChar(50) // e.g., "completed", "in progress"
  grade                 Int?
  student               Student                @relation(fields: [studentId], references: [id])
  assignment            Assignment             @relation(fields: [assignmentId], references: [id])
  chat                  Chat?                  @relation(fields: [chatId], references: [id])
  studentProblemAnswers StudentProblemAnswer[]

  @@id([studentId, assignmentId])
  @@unique([chatId])
}

model StudentProblemAnswer {
  id           Int      @id @default(autoincrement())
  studentId    Int
  problemId    Int
  assignmentId Int
  answer       String   @db.Text // student's answer
  feedback     String?  @db.Text // any feedback provided
  isCorrect    Boolean? // whether the answer is correct or not
  timestamp    DateTime @default(now()) // when the answer was submitted

  student           Student           @relation(fields: [studentId], references: [id])
  problem           Problem           @relation(fields: [problemId], references: [id])
  studentAssignment StudentAssignment @relation(fields: [studentId, assignmentId], references: [studentId, assignmentId])

  @@unique([studentId, problemId]) // each student can have one answer per problem
}

model Chat {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now()) @db.Timestamp(6)
  messages          Message[]
  studentAssignment StudentAssignment? @relation()
}

enum MessageRole {
  system
  user
  assistant
  function
}

model Message {
  id             Int         @id @default(autoincrement())
  role           MessageRole
  content        String      @db.Text
  functionName   String?     @db.VarChar(255)
  hiddenFromUser Boolean     @default(false)
  timestamp      DateTime    @default(now()) @db.Timestamp(6)
  chatId         Int
  chat           Chat        @relation(fields: [chatId], references: [id])
}
